#summary Developers info
#labels Phase-Implementation

= Introduction =

Info for building and programming this app.


= Details =
== Building ==
Python does not require compiling, but it's useful having this app as an deb, rpm... rather than a zipped script.

Once on base dir: $ `dpkg-buildpackage -rfakeroot`

== Design Tips ==
PyWinery is useful and easy-to-use due its dialog-like interface. There is a lot of full featured wineprefix managers with cluttered inferfaces featuring thousands of options. Pywinery is, and should be, simpler as posible.
This has a few drawbacks: It's intentionally minimal interface makes harder add new options, as seen in 0.2 release where I've forced to implement all prefix management using context menus avoiding a huge toolbar.

I've decided, starting on 0.2 release, move the classic "Open dialog" with "Create folder" button from "New prefix" to "Import prefix" function, due users with no wine experience used to became confused with it. I've made a new "New prefix" dialog which only asks user a prefix name. (see BottleSpec implementation)
*This difference should be noted somewhere*, advising "Import prefix" dialog still allow users create their prefixes wherever they want.